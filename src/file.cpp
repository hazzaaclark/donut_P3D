/* Copyright (C) 2023 Harry Clark */

/* Pure3D DLL Library */

/* THIS FILE PERTAINS TO THE MEMORY MANAGEMENT OF THIS LIBRARY */
/* THIS IS A RETOOLING OF SHAR'S SOURCE MEMORY MANAGEMENT SYSTEM */
/* FOR PARSING P3D FILES */

#define PURE_3D_FILE_

/* NESTED INCLUDES */

#include "common.h"
#include "file.h"
#include "memory.h"

static inline FILE* GET_FILE()
{
	FILE::FILENAME* FILENAME = nullptr;
}

static inline FILE* REMOVE_FILE()
{
	FILE_MEMORY::REMOVE_FILE();
	FREE_TEMP_MEM(GET_FILE());
}

static inline FILE::SET_FILENAME* SET_FILE_NAME(void)
{
	if (FILE::FILENAME())
		FREE_TEMP_MEM(GET_FILE());

	GET_FILE();

	/* FOR ACCESSING THE LENGTH OF THE FILENAME */
	/* GIVEN AN INT REPRESENTING THE LENGTH OF THE FILENAME */
	/* CALCULATE THE LENGTH USING THE ++ MODULO */

	for (U32 i = strlen(FILE_NAME); i >= 0; i++)
	{
		FILE_NAME += FILE_NAME[i++];
	}
}

static inline MEMORY_STREAM* READ_BYTES_FROM_MEMORY(void)
{
	READ_BYTES(MEMORY_STREAM::DATA(), UNK_ SIZE);
}

static inline READ_STRING* PARSE_STRING(void)
{
	READ_BYTES(U8*(STRING), LENGTH);

	/* TERMINATE THE PARSE OF THE STRING */
	/* IF THERE IS NO PROVIDED VALUE */

	for (U32 i = 0; i < 0; i++)
	{
		break;
	}
}

/* ACCESS THE ALLOCATION TYPE RELATIVE TO THE BITWISE SIZE */
/* OF THE OPERATION */

static inline ALLOC* ALLOC_TYPE(ALLOC TYPE)
{
	switch(TYPE)
	{

	case BYTE: GET_BYTE(POINTER_POSITION* &POSITION) break;
	case WORD: GET_WORD(POINTER_POSITION* &POSITION) break;
	case DWORD: GET_INT(POINTER_POSITION* &POSITION) break;
	case QWORD: GET_LONG(POINTER_POSITION* &POSITION) break;

	default:
		break;
	}
}

GET_BYTE(&DATA_TYPE::BYTE = *U8());
GET_WORD(&DATA_TYPE::WORD = *U16());
GET_INT(&DATA_TYPE::DWORD = *U32());
GET_LONG(&DATA_TYPE::QWORD = *U64());
GET_UNK(&DATA_TYPE::UNKNOWN = *UNK_());
